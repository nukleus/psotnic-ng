/*******************************************************
 * Psotnic framework generated by framework.sh
 * Copyright (c) 2004-2005 Grzegorz Rusin <grusin@gmail.com>
 * Created: wto sie 28 11:33:03 CEST 2007
 * 
 * WARNING! All changes made in this file will be lost!
 */

#include "../includes/framework.h"
#include "../includes/func_extern.h"
#include "../includes/var_extern.h"

int _strcmp(char *s1, char *s2)
{
    unsigned char *str1 = (unsigned char *) s1;
    unsigned char *str2 = (unsigned char *) s2;
    int res;

    while((res = *str1 - *str2) == 0)
    {
        if(*str1 == '
            return 0;
        str1++;
        str2++;
    }
    return res;
}

extern "C" int _register(char *name, FUNCTION address);

int _register(char *name, FUNCTION address)
{
    if(!_strcmp("mem_strcpy", name))
    {
        memcpy(&mem_strcpy, &address, sizeof(FUNCTION));
        return 1;
    }
    if(!_strcmp("ircd_strcmp", name))
    {
        memcpy(&ircd_strcmp, &address, sizeof(FUNCTION));
        return 1;
    }
    if(!_strcmp("ircd_strncmp", name))
    {
        memcpy(&ircd_strncmp, &address, sizeof(FUNCTION));
        return 1;
    }
    if(!_strcmp("itoa", name))
    {
        memcpy(&itoa, &address, sizeof(FUNCTION));
        return 1;
    }
    if(!_strcmp("findUser", name))
    {
        memcpy(&findUser, &address, sizeof(FUNCTION));
        return 1;
    }
    if(!_strcmp("sendToOwner", name))
    {
        memcpy(&sendToOwner, &address, sizeof(FUNCTION));
        return 1;
    }
    if(!_strcmp("sendToOwners", name))
    {
        memcpy(&sendToOwners, &address, sizeof(FUNCTION));
        return 1;
    }
    if(!_strcmp("getPenalty", name))
    {
        memcpy(&getPenalty, &address, sizeof(FUNCTION));
        return 1;
    }
    if(!_strcmp("privmsg", name))
    {
        memcpy(&privmsg, &address, sizeof(FUNCTION));
        return 1;
    }
    if(!_strcmp("notice", name))
    {
        memcpy(&notice, &address, sizeof(FUNCTION));
        return 1;
    }
    if(!_strcmp("handle", name))
    {
        memcpy(&handle, &address, sizeof(FUNCTION));
        return 1;
    }
    if(!_strcmp("nick", name))
    {
        memcpy(&nick, &address, sizeof(FUNCTION));
        return 1;
    }
    if(!_strcmp("cycle", name))
    {
        memcpy(&cycle, &address, sizeof(FUNCTION));
        return 1;
    }
    if(!_strcmp("server", name))
    {
        memcpy(&server, &address, sizeof(FUNCTION));
        return 1;
    }
    if(!_strcmp("ircIp", name))
    {
        memcpy(&ircIp, &address, sizeof(FUNCTION));
        return 1;
    }
    if(!_strcmp("saveUserlist", name))
    {
        memcpy(&saveUserlist, &address, sizeof(FUNCTION));
        return 1;
    }
    if(!_strcmp("flags2str", name))
    {
        memcpy(&flags2str, &address, sizeof(FUNCTION));
        return 1;
    }
    if(!_strcmp("setTopic", name))
    {
        memcpy(&setTopic, &address, sizeof(FUNCTION));
        return 1;
    }
    if(!_strcmp("isSticky", name))
    {
        memcpy(&isSticky, &address, sizeof(FUNCTION));
        return 1;
    }
    if(!_strcmp("kick4", name))
    {
        memcpy(&kick4, &address, sizeof(FUNCTION));
        return 1;
    }
    if(!_strcmp("kick6", name))
    {
        memcpy(&kick6, &address, sizeof(FUNCTION));
        return 1;
    }
    if(!_strcmp("kick", name))
    {
        memcpy(&kick, &address, sizeof(FUNCTION));
        return 1;
    }
    if(!_strcmp("match", name))
    {
        memcpy(&match, &address, sizeof(FUNCTION));
        return 1;
    }
    if(!_strcmp("srewind", name))
    {
        memcpy(&srewind, &address, sizeof(FUNCTION));
        return 1;
    }
    if(!_strcmp("str2words", name))
    {
        memcpy(&str2words, &address, sizeof(FUNCTION));
        return 1;
    }
    if(!_strcmp("findChanlist", name))
    {
        memcpy(&findChanlist, &address, sizeof(FUNCTION));
        return 1;
    }
    if(!_strcmp("findChannel", name))
    {
        memcpy(&findChannel, &address, sizeof(FUNCTION));
        return 1;
    }
    if(!_strcmp("setReason", name))
    {
        memcpy(&setReason, &address, sizeof(FUNCTION));
        return 1;
    }
    if(!_strcmp("addMode", name))
    {
        memcpy(&addMode, &address, sizeof(FUNCTION));
        return 1;
    }
    if(!_strcmp("addKick", name))
    {
        memcpy(&addKick, &address, sizeof(FUNCTION));
        return 1;
    }
    if(!_strcmp("flushModeQueue", name))
    {
        memcpy(&flushModeQueue, &address, sizeof(FUNCTION));
        return 1;
    }
    if(!_strcmp("initCustomData", name))
    {
        memcpy(&initCustomData, &address, sizeof(FUNCTION));
        return 1;
    }
    if(!_strcmp("knockout", name))
    {
        memcpy(&knockout, &address, sizeof(FUNCTION));
        return 1;
    }
    if(!_strcmp("httpget", name))
    {
        memcpy(&httpget, &address, sizeof(FUNCTION));
        return 1;
    }
    if(!_strcmp("findConnByHandle", name))
    {
        memcpy(&findConnByHandle, &address, sizeof(FUNCTION));
        return 1;
    }
    if(!_strcmp("findConnByName", name))
    {
        memcpy(&findConnByName, &address, sizeof(FUNCTION));
        return 1;
    }
    if(!_strcmp("set", name))
    {
        memcpy(&set, &address, sizeof(FUNCTION));
        return 1;
    }
    if(!_strcmp("NOW", name))
    {
        memcpy(&NOW, &address, sizeof(FUNCTION));
        return 1;
    }
    if(!_strcmp("penalty", name))
    {
        memcpy(&penalty, &address, sizeof(FUNCTION));
        return 1;
    }
    if(!_strcmp("ME", name))
    {
        memcpy(&ME, &address, sizeof(FUNCTION));
        return 1;
    }
    if(!_strcmp("userlist", name))
    {
        memcpy(&userlist, &address, sizeof(FUNCTION));
        return 1;
    }
    if(!_strcmp("net", name))
    {
        memcpy(&net, &address, sizeof(FUNCTION));
        return 1;
    }
    return 0;
}

